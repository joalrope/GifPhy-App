{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","inputCat","useRef","className","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","ref","autoFocus","onClick","current","focus","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAGxCC,EAAWC,iBAAO,MAwBxB,OACI,yBAAKC,UAAY,YACb,0BAAMC,SAlBO,SAACC,GAClBA,EAAEC,iBAG+B,IAA7BP,EAAWQ,OAAOC,SAClBX,GAAe,SAAAY,GAAU,OAAKV,GAAL,mBAAoBU,OAC7CT,EAAc,OAaV,2BACIU,KAAK,OACLC,MAAUZ,EACVa,SA3BS,SAACP,GACtBL,EAAeK,EAAEQ,OAAOF,QA2BZG,IAAQb,EACRc,WAAS,KAGjB,4BAAQC,QAhBQ,WACpBnB,EAAc,IACdI,EAASgB,QAAQC,UAcb,a,uBCxCCC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEJ,mCACTC,EAHa,iDAGoCC,UAAUH,GAH9C,8BAEJ,oCAFI,SAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,yBAAKnB,UAAY,0CACb,yBAAKiC,IAAOd,EAAMe,IAAML,IACxB,+BAAMA,EAAN,OCHCM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdtB,mBAAS,CAC/B6B,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WAENvB,EAASC,GACJuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAItB,CAAEnB,IAEEoB,EDjB4BK,CAAczB,GAAnCa,EAFuB,EAE7BN,KAAcY,EAFe,EAEfA,QAEtB,OACI,oCACI,wBAAIpC,UAAU,qCAAd,IAAqDiB,EAArD,KAEEmB,GAAW,uBAAGpC,UAAU,qCAAb,gBAEb,yBAAKA,UAAY,aAET8B,EAAOJ,KAAK,SAAEC,GAAF,OACR,kBAAC,EAAD,eACIgB,IAAQhB,EAAIC,IACPD,UEdpBiB,EAAe,WAAO,IAAD,EAEMjD,mBAAU,IAFhB,mBAEvBW,EAFuB,KAEXZ,EAFW,KAI9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEQY,EAAWoB,KAAK,SAACT,EAAU4B,GAAX,OACZ,kBAAC,EAAD,CACIF,IAAG,UAAOE,EAAP,YAAgB5B,GACnBA,SAAaA,U,MCbzC6B,IAASC,OAAQ,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.1a82653a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useRef } from 'react';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const inputCat = useRef(null);\r\n\r\n    // Maneja la entrada de nuevas categorias\r\n    const handleInputValue = (e) => {\r\n        setinputValue( e.target.value );\r\n    }\r\n    \r\n    // Se usa en evento submit del formulario para asignar el valor de3l inputValue y se limopia el input\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Se valida que la categoria debe tener al menos un caracter\r\n        if (inputValue.trim().length !== 0) {\r\n            setCategories( categories => [inputValue, ...categories, ]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n    \r\n    // Limpia las Pantalla, al eliminar todos los elementos de categories\r\n    const cleanCategories = () => {\r\n        setCategories([ ]);\r\n        inputCat.current.focus();\r\n    }\r\n\r\n    return (\r\n        <div className = 'catForms'>\r\n            <form onSubmit = { handleSubmit }>\r\n                <input \r\n                    type='text'\r\n                    value = { inputValue }\r\n                    onChange = { handleInputValue }\r\n                    ref = { inputCat } \r\n                    autoFocus\r\n                />\r\n            </form>\r\n            <button onClick = { cleanCategories }>Limpiar</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n// export default AddCategory;","\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const apiKey = 'uBc8hZRlOLMVgyjXu9ddRxVl1qN6LRXk';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }y&limit=10&api_key=${apiKey}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n    \r\n    return (\r\n        <div className = 'card animate__animated animate__fadeIn'>\r\n            <img src= { url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading  } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> { category } </h3>\r\n\r\n            { loading && <p className='\"animate__animated animate__flash'> Loading ...</p> }\r\n\r\n            <div className = 'card-grid'>\r\n                {\r\n                    images.map( ( img ) => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {    \r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n        \r\n    }, [ category ]);\r\n\r\n    return state;  //  { data: [], loading: bool };\r\n\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// raf Crea estructura del componente\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState( [ ] );\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( (category, index) => (\r\n                        <GifGrid\r\n                            key = {`${index}-${category}`}    \r\n                            category = { category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n// export default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { GifExpertApp } from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render( <GifExpertApp />, document.getElementById('root'));"],"sourceRoot":""}